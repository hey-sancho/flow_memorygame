import lib/tropic/tropic_ui;

export {
	memoryGame() -> Tropic;
}

Card(
	face: string,
	opened: DynamicBehaviour<bool>,
	solved: DynamicBehaviour<bool>,
);

ICONSIZE = WidthHeight(160.0, 160.0);
ICONBACK = "icons/back.png";
ICONFACES = generate(0, 10, \i -> "icons/" + lpad(i2s(i), "0", 3) + ".png");
MATCH = 2; // number of cards to match
COLS = if (mobile) 4 else 5;
FACES = {
	types = length(ICONFACES);
	generate(0, types * MATCH, \i -> ICONFACES[i % types]);
}

drawCard(card: Card) -> Tropic {
	face = TPicture(card.face, [ICONSIZE]);
	back = TPicture(ICONBACK, [ICONSIZE]);

	hovering = make(false);
	pressing = make(false);

	highlight = \color, size -> TRectangle([Fill(color), FillOpacity(0.35)], size);
	highlightVisible = fOr(card.solved, fand(fnot(card.opened), hovering));

	normal = TCopySize(
		TIf(card.opened, face, back),
		\size -> TVisible(highlightVisible,
			TIf(
				pressing,
				highlight(black, size),
				highlight(white, size)
			)
		),
		true
	);

	open = \ -> nextDistinct(card.opened, true);
	state = [
		TOnClicked(open),
		THovering(hovering),
		TPressed(pressing),
		TEnabled(fnot(card.solved))
	];

	button = TRawButton(normal, normal, normal, normal, "", [], state);
	TBorder4(2.0, button);
}

blockerForm(content: Tropic, click: DynamicBehaviour<bool>, visible: Transform<bool>) -> Tropic {
	state = [
		// send click signals to behaviour
		TMouseDown(click),
		// disallow event propagation below
		MouseMove(\mi -> mi().inside),
		RollOver(nop1),
		RollOut(nop1)
	];

	TCopySize(
		TFrame(40.0, 0.0, [Fill(0xe3e3e3)], content),
		\tr -> TVisible(visible, TInteractive(state, TRectangle(interactiveRectangleStyle, tr))),
		true
	);
}

memoryGameTropic(gameRound: int, nextRound: () -> void) -> Tropic {
	text = \t : string -> TText(t, [FontSize(20.0)]);

	movesCount = make(0);
	header = TCols([
		text("Memory game - Round " + i2s(gameRound)),
		TFillX(),
		TSelect(movesCount, \moves -> text("Moves: " + i2s(moves))),
	]);

	makeCard = \icon -> Card(icon, make(false), make(false));
	cards = map(shuffleArray(FACES), makeCard);
	cardGrid = TGrid(splitByNumber(map(cards, drawCard), COLS));

	activeCardStates = fmerge(map(cards, \c -> fand(c.opened, fnot(c.solved))));
	activeCount = flength(ffilter(activeCardStates, idfn));
	solvedAll = feq(flength(ffilter(fmerge(map(cards, \c -> c.solved)), idfn)), length(FACES));

	closeClick = make(false);
	closeOpened = \close -> {
		if (close) {
			unsolvedCards = filter(cards, \c -> !getValue(c.solved));
			// deferred pauses execution for a bit, to avoid bad update cycles
			deferred(\ -> iter(unsolvedCards, \c -> nextDistinct(c.opened, false)));
		}
	}

	matchOpened = \activeStates -> {
		activeCards : [Card] = filtermapi(cards, \i, c -> if (activeStates[i]) Some(c) else None());
		if (length(activeCards) == MATCH) {
			face = activeCards[0].face; // if you need array indices, something is wrong
			matchedCards = filter(activeCards, \c : Card -> c.face == face);
			if (length(matchedCards) == MATCH) {
				deferred(\ -> iter(matchedCards, \c -> nextDistinct(c.solved, true)))
			}
			nextDistinct(movesCount, getValue(movesCount) + 1);
		}
	}

	congratulate = \solved -> {
		if (solved) {
			close = make(false);
			onClick = \ -> {
				reverseBehaviour(close);
				nextRound();
			}
			moves = movesCount |> getValue |> i2s;
			dialog = TLinesXCenter([
				text("You won in " + moves + " moves!"),
				TTextButton(
					"Play again", "enter",
					[FontFamily("RobotoMedium")], [TOnClicked(onClick)]
				)
			]);
			ShowTDialog(TFrame(20.0, 10.0, [Fill(white)], dialog), [TCloseWhen(close)]);
		}
	}

	deferredCloseMismatched = \openedCount -> {
		timer(500, \-> {
			if (openedCount == MATCH) {
				closeOpened(true)
			}
		});
	}

	TConstruct(
		[
			makeSubscribe(activeCardStates, matchOpened),
			makeSubscribe(closeClick, closeOpened),
			makeSubscribe(solvedAll, congratulate),
			makeSubscribe(activeCount, deferredCloseMismatched)
		],
		TLinesSameWidth([
			header,
			blockerForm(cardGrid, closeClick, feq(activeCount, MATCH)),
		])
	);
}

memoryGame() -> Tropic {
	view = make(TEmpty());
	gameRounds = make(0);
	nextRound = \ -> nextDistinct(gameRounds, getValue(gameRounds) + 1);
	restartGame = \gameRound -> memoryGameTropic(gameRound, nextRound);

	TConstruct(
		[
			\ -> fconnectSelect(gameRounds, view, restartGame)
		],
		TZoom(TMutable(view), TFillXY(), true)
	);
}
